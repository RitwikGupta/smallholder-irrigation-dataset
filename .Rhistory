# Locate all individual _merged.csv files
csv_files <- list.files(
path = "data/labels/labeled_surveys/random_sample/merged/",
pattern = "_merged\\.csv$", full.names = TRUE
)
shiny::runApp('shiny_app')
# Load merged irrigation dataset
merged_data <- read_csv("data/merged_dataset.csv")
# combine_datasets.R
library(tidyverse)
csv_files <- list.files(
path = "data/labels/labeled_surveys/random_sample/merged/",
pattern = "_merged\\.csv$", full.names = TRUE
)
# Combine them
merged_data <- purrr::map_dfr(csv_files, read_csv)
View(merged_data)
View(merged_data)
colnames(merged_data)
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
git branch
git branch
shiny::runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
shiny::runApp('shiny_app')
# Load the map data
raw <- read_csv("data/merged_dataset.csv")
# Load the map data
raw <- read_csv("shiny_app/data/merged_dataset.csv")
raw <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", location_id)))
raw <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", site_id)))
View(raw)
raw <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", site_id))) |>
# Drop ID name
select(-location_id)
View(raw)
raw_clean <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", site_id))) |>
# Drop ID name
select(-location_id)
# Load the map data
raw <- read_csv("shiny_app/data/merged_dataset.csv")
raw_clean <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", site_id))) |>
# Drop ID name
select(-location_id)
raw_clean <- raw |>
select(-c(internal_id, plot_file, operator, source_file)) |>
# Extract the numeric ID for each location
mutate(location_num = as.integer(gsub("id_", "", site_id))) |>
# Drop ID name
select(-site_id)
View(raw_clean)
raw |>
count(site_id, x, y) |>
arrange(site_id) |>
View()
raw |>
group_by(site_id) |>
summarise(n_unique_coords = n_distinct(paste(x, y))) |>
filter(n_unique_coords > 1)
summary_data <- raw_clean |>
group_by(site_id, x, y, image_number) |>
summarise(
year = first(year),
month = first(month),
day = first(day),
avg_certainty = mean(irrigation, na.rm = TRUE),
avg_percent_coverage_high = mean(percent_coverage_high_certainty, na.rm = TRUE),
n_labelers = n_distinct(operator_initials),
water_source_mode = names(sort(table(water_source), decreasing = TRUE))[1],
.groups = "drop"
)
summary_data <- raw_clean |>
group_by(location_num, x, y, image_number) |>
summarise(
year = first(year),
month = first(month),
day = first(day),
avg_certainty = mean(irrigation, na.rm = TRUE),
avg_percent_coverage_high = mean(percent_coverage_high_certainty, na.rm = TRUE),
n_labelers = n_distinct(operator_initials),
water_source_mode = names(sort(table(water_source), decreasing = TRUE))[1],
.groups = "drop"
)
View(summary_data)
summary_data <- raw_clean |>
group_by(location_num, x, y) |>
summarise(
images = max(image_number, na.rm = TRUE),
year = first(year),
month = first(month),
day = first(day),
avg_certainty = mean(irrigation, na.rm = TRUE),
avg_percent_coverage_high = mean(percent_coverage_high_certainty, na.rm = TRUE),
n_labelers = n_distinct(operator_initials),
water_source_mode = names(sort(table(water_source), decreasing = TRUE))[1],
.groups = "drop"
)
View(summary_data)
summary_data <- raw_clean |>
group_by(location_num, x, y) |>
summarise(
images = max(image_number, na.rm = TRUE),
year = first(year),
month = first(month),
day = first(day),
avg_certainty = mean(irrigation, na.rm = TRUE),
avg_perecent_coverage = mean(percent_coverage, na.rm = TRUE),
avg_percent_coverage_high = mean(percent_coverage_high_certainty, na.rm = TRUE),
n_labelers = n_distinct(operator_initials),
water_source_mode = names(sort(table(water_source), decreasing = TRUE))[1],
.groups = "drop"
)
runApp('shiny_app')
summary_data <- raw_clean |>
group_by(location_num, x, y) |>
summarise(
images = max(image_number, na.rm = TRUE),
year = first(year),
month = first(month),
day = first(day),
avg_certainty = mean(irrigation, na.rm = TRUE),
avg_percent_coverage = mean(percent_coverage, na.rm = TRUE),
avg_percent_coverage_high = mean(percent_coverage_high_certainty, na.rm = TRUE),
n_labelers = n_distinct(operator_initials),
water_source_mode = names(sort(table(water_source), decreasing = TRUE))[1],
.groups = "drop"
)
runApp('shiny_app')
names(summary_data)
runApp('shiny_app')
str(selected_point())
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
summary_data <- summary_data |>
mutate(log_coverage = if_else(
avg_percent_coverage == 0,
0,
log1p(avg_percent_coverage)
))
View(summary_data)
runApp('shiny_app')
runApp('shiny_app')
git status
